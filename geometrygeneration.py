# -*- coding: utf-8 -*-
"""GeometryGeneration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bhP40xYnNXnmR8aNx5_oue3oEVJO1oUv
"""

!pip install solidpython

import pathlib
import subprocess
from solid import *
from solid.utils import *
import numpy as np


def create_filled_gap(height, body_radius, fin_base, fin_thickness):
    fin_gap_2d = polygon(points=[
        [0, 0],
        [body_radius + fin_base, 0],
        [0, height+height*body_radius/fin_base]
    ])
    fin_gap_3d = linear_extrude(fin_thickness)(fin_gap_2d)
    fin_gap_3d = rotate([90, 0, 0])(fin_gap_3d)
    return fin_gap_3d


def create_rocket_with_fins_and_cone(fin_height, fin_base, fin_thickness, body_radius, body_height, cone_height, fin_count):
    # Create the rocket body
    body = cylinder(h=body_height, r=body_radius)

    # Create the rocket cone
    cone = translate([0, 0, body_height])(cylinder(h=cone_height, r1=body_radius, r2=0))

    # Create the fins
    fin_gap = create_filled_gap(fin_height, body_radius, fin_base, fin_thickness)
    fin_gap = translate([0, fin_thickness / 2, 0])(fin_gap)
    fins = []
    for i in range(int(fin_count)):
        # Translate fins to the base of the rocket and rotate to attach them properly
        angle = 360/fin_count * i
        fin_rotation = rotate([0, 0, angle])(fin_gap)
        fins.append(fin_rotation)
    all_fins = union()(*fins)
    rocket = union()(body, all_fins, cone)

    return rocket


def is_model_watertight(model):
    # Export a temporary STL to check for watertightness using a CAD tool or script
    temp_path = pathlib.Path("temp.stl")
    scad_render_to_file(model, "temp.scad")
    subprocess.run(["openscad", "-o", temp_path, "temp.scad"])
    # Placeholder for watertight check - typically done with external tools/scripts
    return True


n_samples = 1000
unscaled_array = np.random.rand(n_samples, 6)
upper_bound = np.array([30, 15, 3, 6, 70, 25])
lower_bound = np.array([10, 5, 1, 4, 50, 15])
fin_count = np.random.randint(3, 7, n_samples, dtype=int)
fin_count = np.expand_dims(fin_count, axis=1)
scaled_array = unscaled_array * (upper_bound - lower_bound) + lower_bound
scaled_array = np.concatenate((scaled_array, fin_count), axis=1)
i =35
# Create and export rockets
for i, row in enumerate(scaled_array):
    if len(row) == 7:  # 6 parameters + 1 fin_count
        fin_height, fin_base, fin_thickness, body_radius, body_height, cone_height, fin_count = row
        rocket = create_rocket_with_fins_and_cone(
            fin_height=fin_height,
            fin_base=fin_base,
            fin_thickness=fin_thickness,
            body_radius=body_radius,
            body_height=body_height,
            cone_height=cone_height,
            fin_count=fin_count
        )
        print(f"rocket_{i}")
        print(fin_height)
        print(fin_base)
        print(fin_thickness)
        print(body_radius)
        print(body_height)
        print(cone_height)
        print(fin_count)
        print(" ")

        # Ensure the model is watertight
        if not is_model_watertight(rocket):
            print(f"Model {i} is not watertight. Skipping...")
            continue

        # Export to SCAD and STL files
        scad_path = pathlib.Path(f"/content/rocket_{i}.scad")
        stl_path = pathlib.Path(f"/content/rocket_{i}.stl")


        scad_render_to_file(rocket, scad_path)
        subprocess.run(["openscad", "-o", stl_path, scad_path])
    else:
        print(f"Skipping row {i} with unexpected number of values: {row}")