# -*- coding: utf-8 -*-
"""AutoGluon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cASfZqQxbFNmxZfuA9yhGmq6QrpUbeNg
"""

!pip install autogluon.tabular

from google.colab import drive
import os
drive.mount('/content/drive', force_remount=True)
file_path = '/content/drive/MyDrive/Output Files'
os.chdir(file_path)

import pandas as pd
from autogluon.tabular import TabularPredictor

# Load your dataset

rocket_df = pd.read_csv('Model Dataset2.csv')
print(rocket_df)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0.1, 2.5))
rocket_df['Pressure'] = scaler.fit_transform(rocket_df[['Pressure']])

print(rocket_df['Pressure'].min())
rocket_df['Pressure'].max()

from sklearn.model_selection import train_test_split

# Specify the column to predict
dependent = 'Pressure'  # Target column
independent = ['fin_height', 'fin_base', 'fin_thickness', 'body_radius', 'body_height', 'cone_height', 'fin_count']  # Features

# Extract features (X) and target (y)
X = rocket_df[independent]
y = rocket_df[dependent]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=870)

from autogluon.tabular import TabularPredictor

# Recombine training data into a single DataFrame
train_data = pd.concat([X_train, y_train], axis=1)


# Train the model
predictor = TabularPredictor(label=dependent).fit(train_data, time_limit=600)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Generate predictions
y_pred = predictor.predict(X_test)

# Compute metrics manually
mse = mean_squared_error(y_test, y_pred)
rmse = mse**0.5
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE: {mse}")
print(f"RMSE: {rmse}")
print(f"MAE: {mae}")
print(f"R2: {r2}")

# Combine features and target into a single test DataFrame
test_data = pd.concat([X_test, y_test], axis=1)

# Make predictions
predictions = predictor.predict(test_data)

# Evaluate the model
performance = predictor.evaluate(test_data)
print(performance)

import matplotlib.pyplot as plt
import numpy as np

# True labels and predicted values
true_values = test_data['Pressure']

# Residuals
residuals = true_values - predictions

# Create the plot
plt.scatter(predictions, residuals, color='blue', alpha=0.5)
plt.axhline(y=0, color='red', linestyle='--')

# Set y-axis ticks with increments of 0.5
y_min, y_max = np.floor(residuals.min()), np.ceil(residuals.max())
plt.yticks(np.arange(y_min, y_max + 0.1, 0.1))
plt.ylim(-0.5, 0.5)
# Add labels and title
plt.title('Residual Plot(Autogluon)')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals (True - Predicted)')

# Display the plot
plt.show()

plt.scatter(true_values, predictions, alpha = 0.5)
plt.plot([min(true_values), max(true_values)], [min(true_values), max(true_values)], 'r--')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Predicted vs Actual Plot')
plt.show()